---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    options: "{{ molecule_yml.driver.options }}"
  tasks:
    - name: "Load proxmox connection secrets."
      ansible.builtin.include_tasks: common/secrets.yml
      when: options.proxmox_secrets is defined

    - name: "Create molecule instance(s)."
      community.general.proxmox_kvm:
        state: present
        api_host: "{{ api_host | d(options.api_host) | d(omit) }}"
        api_port: "{{ api_port | d(options.api_port) | d(omit) }}"
        api_user: "{{ api_user | d(options.api_user) | d(omit) }}"
        api_password: "{{ api_password | d(options.api_password) | d(omit) }}"
        api_token_id: "{{ api_token_id | d(options.api_token_id) | d(omit) }}"
        api_token_secret: "{{ api_token_secret | d(options.api_token_secret) | d(omit) }}"
        vmid: "{{ p.proxmox_template_vmid | d(p.template_vmid, true) | d(omit, true) }}"
        clone: "{{ p.proxmox_template_name | d(p.template_name, true) | d(options.template_name, true) | d(p.box, true) | d('molecule', true) }}"
        name: "{{ p.name }}"
        node: "{{ options.node }}"
        timeout: "{{ options.timeout | d(omit) }}"
        pool: "{{ options.pool | d(omit) }}"
        newid: "{{ p.newid | d(p.newid, true) | d(omit, true) }}"
        ciuser: "{{ p.ciuser | d(omit, true) }}"
        cipassword: "{{ p.cipassword | d(omit, true) }}"
        citype: "{{ p.citype | d(omit, true) }}"
        ipconfig: "{{ p.ipconfig | d(omit, true) }}"
        nameservers: "{{ p.nameservers | d(omit, true) }}"
        searchdomains: "{{ p.searchdomains | d(omit, true) }}"
        sshkeys: "{{ p.sshkeys | d(omit, true) }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        loop_var: p
        label: "{{ p.name }}"
      register: proxmox_clone

    - name: "Start molecule instance(s)."
      community.general.proxmox_kvm:
        state: started
        api_host: "{{ api_host | d(options.api_host) | d(omit) }}"
        api_port: "{{ api_port | d(options.api_port) | d(omit) }}"
        api_user: "{{ api_user | d(options.api_user) | d(omit) }}"
        api_password: "{{ api_password | d(options.api_password) | d(omit) }}"
        api_token_id: "{{ api_token_id | d(options.api_token_id) | d(omit) }}"
        api_token_secret: "{{ api_token_secret | d(options.api_token_secret) | d(omit) }}"
        vmid: "{{ proxmox_clone_results.vmid }}"
        timeout: "{{ options.timeout | d(omit) }}"
      loop: "{{ proxmox_clone.results }}"
      loop_control:
        loop_var: proxmox_clone_results
        label: "{{ proxmox_clone_results.p.name, proxmox_clone_results.vmid }}"

    - name: "Obtain VM information"
      community.general.proxmox_vm_info:
        api_host: "{{ api_host | d(options.api_host) | d(omit) }}"
        api_port: "{{ api_port | d(options.api_port) | d(omit) }}"
        api_user: "{{ api_user | d(options.api_user) | d(omit) }}"
        api_password: "{{ api_password | d(options.api_password) | d(omit) }}"
        api_token_id: "{{ api_token_id | d(options.api_token_id) | d(omit) }}"
        api_token_secret: "{{ api_token_secret | d(options.api_token_secret) | d(omit) }}"
        vmid: "{{ proxmox_clone_results.vmid }}"
        network: true
      loop: "{{ proxmox_clone.results }}"
      loop_control:
        loop_var: proxmox_clone_results
        label: "{{ proxmox_clone_results.p.name, proxmox_clone_results.vmid }}"
      register: vminfo
      until: "vminfo is not failed and vminfo.results.proxmox_vms[0]['network'] is defined"
      retries: 5
      delay: "{{ options.timeout | d(25) | int / 5 | int }}"

    - name: "Load ip address subtask."
      ansible.builtin.import_tasks: common/match_ip_address.yml

    - name: "Populate instance configs."
      ansible.builtin.set_fact:
        instance_config:
          instance: "{{ guest_vars_results.vminfo_results.proxmox_vms[0]['name'] }}"
          address: "{{ guest_vars_results.ansible_facts.address[0] }}"
          user: "{{ options.ssh_user | d('molecule') }}"
          port: "{{ options.ssh_port | d(22) }}"
          identity_file: "{{ options.ssh_identity_file }}"
          vmid: "{{ guest_vars_results.vminfo_results.proxmox_vms[0]['vmid'] }}"
      loop: "{{ guest_vars.results }}"
      loop_control:
        loop_var: guest_vars_results
        label: "{{ guest_vars_results.vminfo_results.proxmox_vms[0]['name'], guest_vars_results.vminfo_results.proxmox_vms[0]['vmid'] }}"
      register: instance_configs

    - name: "Set instance_config fact."
      ansible.builtin.set_fact:
        instance_configs: "{{ instance_configs.results | map(attribute='ansible_facts.instance_config') | list }}"

    - name: "Write instance configs."
      ansible.builtin.copy:
        content: "{{ instance_configs | to_nice_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: '0644'
