[tox]
minversion = 4.11.4
env_list = \
  py3{10,11,12}-mol060000, \
  py3{10,11,12}-mol060001, \
  py3{10,11,12}-mol060002, \
  py3{10,11,12}-mol060003, \
  py3{10,11,12}-mol240200, \
  py3{10,11,12}-mol240201, \
  py3{10,11,12}-mol240600, \
  py3{10,11,12}-mol240601, \
  py3{10,11,12}-mol240700, \
  py3{10,11,12}-mol240800, \
  py3{10,11,12}-mol240900, \
  py3{11,12,13}-mol241200, \
  py3{11,12,13}-mol250100

#
# Usage:  tox [-e <environment>] [-- <pytest-options>]
#         tox list  # to list environments
#
[testenv]
description = Run the tests
package = wheel
wheel_build_env = .pkg
deps =
    pytest==7.4.4
    # Ansible versions
    mol060000: ansible==10.4.0
    mol060001: ansible==10.4.0
    mol060002: ansible==10.4.0
    mol060003: ansible==10.4.0
    mol240200: ansible==10.4.0
    mol240201: ansible==10.4.0
    mol240600: ansible==10.4.0
    mol240601: ansible==10.4.0
    mol240700: ansible==10.4.0
    mol240800: ansible==10.4.0
    mol240900: ansible==10.4.0
    mol241200: ansible==11.4.0
    mol250100: ansible==11.4.0
    # Molecule versions
    mol060000: molecule==6.0.0
    mol060001: molecule==6.0.1
    mol060002: molecule==6.0.2
    mol060003: molecule==6.0.3
    mol240200: molecule==24.2.0
    mol240201: molecule==24.2.1
    mol240600: molecule==24.6.0
    mol240601: molecule==24.6.1
    mol240700: molecule==24.7.0
    mol240800: molecule==24.8.0
    mol240900: molecule==24.9.0
    mol241200: molecule==24.12.0
    mol250100: molecule==25.1.0
passenv =
    SSH_*
    TEST_PROXMOX_*
commands =
    pytest -v tests {posargs}

#
# Usage:  tox -e latest [-- <pytest-options>]
#
# Examples:
#    tox -e latest -- --co           # list tests
#    tox -e latest -- -s -k default  # run the default scenario test
#
[testenv:latest]
description = Run the tests with the latest versions
basepython = python3.13
package = wheel
wheel_build_env = .pkg
deps =
    pytest==7.4.4
    ansible==11.4.0
    molecule==25.1.0
passenv =
    SSH_*
    TEST_PROXMOX_*
commands =
    pytest -v tests {posargs}

#
# Usage:  tox -e dev
#
# To activate the development environment:
#
#    deactivate
#    source .tox/dev/bin/activate
#
# Then run molecule in the tests directory:
#
#    cd tests
#    BOX=<box> BOX_VERSION=<version> molecule test [-s <scenario>]
#    cd ..
#
# Or run the tests with pytest:
#
#    pytest --co tests            # list tests
#    pytest -v [-k <pattern>] tests # run tests
#
[testenv:dev]
description = Development environment
basepython = python3.12
usedevelop = True
deps =
    pytest==7.4.4
    ansible==10.4.0
    molecule==24.9.0
passenv =
    SSH_*
    TEST_PROXMOX_*
commands =

#
# Usage:  tox -e lint
#
[testenv:lint]
description = Run static checks
basepython = python3.12
setenv =
    ANSIBLE_LIBRARY = src/molecule_proxmox
deps =
    ansible==10.4.0
    ansible-lint==6.22.2
    collective.checkdocs==0.2
    flake8==7.0.0
    pyflakes==3.2.0
    pylint==3.0.3
    setuptools==69.0.3
    yamllint==1.33.0
commands =
    pyflakes src tests
    flake8 src tests
    yamllint src tests
    ansible-lint src/molecule_proxmox/playbooks
    python setup.py -q checkdocs

#
# Usage:  tox -e docs
#
[testenv:docs]
description = Build documentation
basepython = python3.12
changedir = docs
deps =
    Sphinx==7.2.6
    sphinx-rtd-theme==2.0.0
commands =
    sphinx-build -M html source build

#
# Usage:  tox -e release
#
# Note: Set TWINE env vars or ~/.pypirc before running.
#
[testenv:release]
basepython = python3.12
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL
deps =
    build==1.0.3
    twine==4.0.2
commands =
    python -m build
    twine check dist/*
    twine upload --repository molecule-proxmox --skip-existing dist/*
